@model EManifestServices.DAL.VoyageDetails
@using EManifestServices
@using Telerik.Reporting
@using Telerik.ReportViewer.Mvc


<div class="container-fluid">
    <div class="row">
        @*<script src="http://code.jquery.com/jquery-1.9.1.min.js"></script>*@

        <link href="https://kendo.cdn.telerik.com/2015.3.930/styles/kendo.common.min.css" rel="stylesheet" />
        <link href="https://kendo.cdn.telerik.com/2015.3.930/styles/kendo.material.min.css" rel="stylesheet" />

        <!--kendo.all.min.js can be used as well instead of the following custom Kendo UI subset-->
        <script src="@Url.Content("~/ReportViewer/js/telerikReportViewer.kendo-11.2.17.913.min.js")"></script>

        <style>
            #reportViewer1 {
                position: relative;
                width: 1300px;
                height: 900px;
                font-family: Verdana, Arial;
            }
        </style>

        <script src="@Url.Content("~/ReportViewer/js/telerikReportViewer-11.2.17.913.min.js")"></script>
        @{
            var typeName="";
            if (Model.ManifestType=="FCLContainer")
            {
                typeName= typeof(EManifestServices.Reports.FCLReport).AssemblyQualifiedName;
            }
            if (Model.ManifestType == "LCLContainer")
            {
                typeName = typeof(EManifestServices.Reports.LCLReport).AssemblyQualifiedName;
            }
            if (Model.ManifestType == "GeneralCargo")
            {
                typeName = typeof(EManifestServices.Reports.GCReport).AssemblyQualifiedName;
            }
            if (Model.ManifestType == "FCLContainerRelationNotknown")
            {
                typeName = typeof(EManifestServices.Reports.FCLNRReport).AssemblyQualifiedName;
            }
            
            var typeReportSource = new TypeReportSource() { TypeName = typeName };
            typeReportSource.Parameters.Add("voyageDetailsId", Model.VoyageDetailsId.ToString());
        }

        @(Html.TelerikReporting().ReportViewer()
                                                    // Each report viewer must have an id - it will be used by the initialization script
                                                    // to find the element and initialize the report viewer.
                                                    .Id("reportViewer1")
                                                    // The URL of the service which will serve reports.
                                                    // The URL corresponds to the name of the controller class (ReportsController).
                                                    // For more information on how to configure the service please check http://www.telerik.com/help/reporting/telerik-reporting-rest-conception.html.
                                                    .ServiceUrl(Url.Content("~/api/reports"))
                                                    // The URL for the report viewer template. The template can be edited -
                                                    // new functionalities can be added and unneeded ones can be removed.
                                                    // For more information please check http://www.telerik.com/help/reporting/html5-report-viewer-templates.html.
                                                    // .TemplateUrl(Url.Content("~/ReportViewer/templates/telerikReportViewerTemplate-11.2.17.913.html"))
                                                    // Strongly typed ReportSource - TypeReportSource or UriReportSource.
                                                    .ReportSource(typeReportSource)
                                                    // Specifies whether the viewer is in interactive or print preview mode.
                                                    // PrintPreview - Displays the paginated report as if it is printed on paper. Interactivity is not enabled.
                                                    // Interactive - Displays the report in its original width and height with no paging. Additionally interactivity is enabled.
                                                    .ViewMode(ViewMode.Interactive)
                                                    // Sets the scale mode of the viewer.
                                                    // Three modes exist currently:
                                                    // FitPage - The whole report will fit on the page (will zoom in or out), regardless of its width and height.
                                                    // FitPageWidth - The report will be zoomed in or out so that the width of the screen and the width of the report match.
                                                    // Specific - Uses the scale to zoom in and out the report.
                                                    .ScaleMode(ScaleMode.Specific)
                                                    // Zoom in and out the report using the scale
                                                    // 1.0 is equal to 100%, i.e. the original size of the report
                                                    .Scale(1.0)
                                                    // Sets whether the viewer’s client session to be persisted between the page’s refreshes(ex. postback).
                                                    // The session is stored in the browser’s sessionStorage and is available for the duration of the page session.
                                                    .PersistSession(false)
                                                    // Sets the print mode of the viewer.
                                                    .PrintMode(PrintMode.AutoSelect)
                                                    //Switches accessibility mode ON or OFF.
                                                    .EnableAccessibility(false)
        )
    </div>
</div>
