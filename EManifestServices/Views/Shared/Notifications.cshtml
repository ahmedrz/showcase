                              <!-- notification_Start -->
<div class="dropdown dropdown-notification">
    @if (Session["User"] != null)
    {
        @Html.Hidden("UserId", ((EManifestServices.Models.UserModel)Session["User"]).UserId.ToString())
    }
    <a href="javascript:;" class="dropdown-toggle" data-toggle="dropdown" data-hover="dropdown" data-close-others="true" aria-expanded="false"> <i class="fa fa-bell-o"></i> <span id="notificationCountBadge" class="badge_coun"> 0 </span> </a>
    <ul class="dropdown-menu scroll_auto height_fixed">
        <li class="bigger">
            <h3><span class="bold">Notifications</span></h3>
            <span id="notificationCount" class="notification-label">New 0</span>
        </li>
        <li>
            <ul id="notificationMenu" class="dropdown-menu-list">
                @*<li>
                        <a href="javascript:;"> <span class="time">just now</span> <span class="details"> <span class="notification-icon deepPink-bgcolor"> <i class="fa fa-check"></i> </span> Congratulations!. </span> </a>
                    </li>
                    <li>
                        <a href="javascript:;">
                            <time class="timeago time" datetime="2008-07-17T09:24:17Z">
                                July 17, 2008
                            </time>
                            <span class="details">
                                <span class="notification-icon blue-bgcolor">
                                    <i class="fa fa-comments-o"></i>
                                </span> <b>ahmed Razzaq </b>sent you a message.
                            </span>
                        </a>
                    </li>*@

            </ul>
        </li>
    </ul>
</div>
<!-- notification_End -->
<!--Script references. -->
<!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
<!--Reference the SignalR library. -->
<script src="~/Scripts/jquery.signalR-2.2.2.min.js"></script>
<!--Reference the autogenerated SignalR hub script. -->
<script src="~/signalr/hubs"></script>
<script src="~/assets/js/timeago.js"></script>
<!--SignalR script to update the chat page and send messages.-->
<script>
    //var clientTimeOffset = new Date().getTimezoneOffset();
    var notificationCount = 0;
    $(function () {
        // Reference the auto-generated proxy for the hub.
        var chat = $.connection.notificationHub;
        chat.client.addNewNotification = notificationReceive;
        // Start the connection.
        $.connection.hub.qs = 'id=' + $('#UserId').val();
        $.connection.hub.logging = true;
        $.connection.hub.start();
         $.ajax({
             url: '@Url.Action("GetNotifications", "Manifest")',
          type: "GET",
          dataType: "json",
          success: function (data) {

              data.Notifications.forEach(addNotificationToUi, false);
              notificationCount = data.NewCount;
              updateNotificationCount(notificationCount);
          },
          error: function (req, status, errorObj) {
              alert(errorObj);
          }
});

        function applytimeago() {
            //timeago
            jQuery("time.timeago").timeago();
        }
        function getColorForStatus(status) {
            if (status === true) {
                return 'blue-bgcolor'
            }
            return 'deepPink-bgcolor'
        }
        function addNotificationToUi(notification,modifyCounters) {
            // Add the message to the page.
            $('#notificationMenu').prepend('<li><a href="javascript:;" onclick="notificationRead(this)" data-read=' + notification.Read + ' data-notificationid="' + notification.NotificationId + '">' + '<time class="timeago time" datetime="' + notification.NotificationDate + '"></time>'
                + '<span class="details"><span class= "notification-icon ' + getColorForStatus(notification.Status) + '"><i class="fa ' + getIconForStatus(notification.Status) + '"></i></span >' + notification.Header + '  </span></li></a>');
            //timeago
            applytimeago();
            if (modifyCounters) {
                notificationCount++;
                updateNotificationCount(notificationCount);
            }

        };
        function notificationReceive(notification) {
            addAlert('you have new notification', true);
            //var notificationDate = isoStringToDate(notification.NotificationDate);
            //notification.NotificationDate = notificationDate;
            addNotificationToUi(notification,true);
            var dataGrid = $('#grid').data('kendoGrid');
            if (dataGrid) {
                dataGrid.dataSource.read();
                dataGrid.refresh();
            }

        };
        function getIconForStatus(status) {
            if (status === true) {
                return 'fa-check'
            }
            return 'fa-times'
        };


    });
        function notificationRead(anchor) {
            var notificationid = $(anchor).attr('data-notificationid');
            var read = $(anchor).attr('data-Read');
            if (read !== 'true') {
                  $.ajax({
                   url: '@Url.Action("NotificationRead","Manifest")/' + notificationid,
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        if (data.Success === true) {

                            notificationCount--;
                            updateNotificationCount(notificationCount);
                        }
                    },
                    error: function (req, status, errorObj) {

                    }
                });
            }
            window.location = '@Url.Action("GetNotification","Manifest", new { id = UrlParameter.Optional })/' + notificationid;
    };
    function updateNotificationCount(count) {
        $('#notificationCount').text('New ' + count);
        $('#notificationCountBadge').text(count);

    };
    // Parse an ISO date string (i.e. "2019-01-18T00:00:00.000Z",
    // "2019-01-17T17:00:00.000-07:00", or "2019-01-18T07:00:00.000+07:00",
    // which are the same time) and return a JavaScript Date object with the
    // value represented by the string.
    function isoStringToDate(isoString) {

        // Split the string into an array based on the digit groups.
        var dateParts = isoString.split(/\D+/);

        // Set up a date object with the current time.
        var returnDate = new Date();

        // Manually parse the parts of the string and set each part for the
        // date. Note: Using the UTC versions of these functions is necessary
        // because we're manually adjusting for time zones stored in the
        // string.
        returnDate.setUTCFullYear(parseInt(dateParts[0]));

        // The month numbers are one "off" from what normal humans would expect
        // because January == 0.
        returnDate.setUTCMonth(parseInt(dateParts[1] - 1));
        returnDate.setUTCDate(parseInt(dateParts[2]));

        // Set the time parts of the date object.
        returnDate.setUTCHours(parseInt(dateParts[3]));
        returnDate.setUTCMinutes(parseInt(dateParts[4]));
        returnDate.setUTCSeconds(parseInt(dateParts[5]));
        returnDate.setUTCMilliseconds(parseInt(dateParts[6]));

        // Track the number of hours we need to adjust the date by based
        // on the timezone.
        var timezoneOffsetHours = 0;

        // If there's a value for either the hours or minutes offset.
        if (dateParts[7] || dateParts[8]) {

            // Track the number of minutes we need to adjust the date by
            // based on the timezone.
            var timezoneOffsetMinutes = 0;

            // If there's a value for the minutes offset.
            if (dateParts[8]) {

                // Convert the minutes value into an hours value.
                timezoneOffsetMinutes = parseInt(dateParts[8]) / 60;
            }

            // Add the hours and minutes values to get the total offset in
            // hours.
            timezoneOffsetHours = parseInt(dateParts[7]) + timezoneOffsetMinutes;

            // If the sign for the timezone is a plus to indicate the
            // timezone is ahead of UTC time.
            if (isoString.substr(-6, 1) == "+") {

                // Make the offset negative since the hours will need to be
                // subtracted from the date.
                timezoneOffsetHours *= -1;
            }
        }

        // Get the current hours for the date and add the offset to get the
        // correct time adjusted for timezone.
        returnDate.setHours(returnDate.getHours() + timezoneOffsetHours);

        // Return the Date object calculated from the string.
        return returnDate;
    }
</script>

